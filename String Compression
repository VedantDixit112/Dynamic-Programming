
class Solution {
    public int getLengthOfOptimalCompression(String s, int k) {
        int n = s.length();
        Integer[][][][] dp = new Integer[n+1][27][11][n+1]; 
        if(n-k==100){
            boolean is100 = true; 

            for(int i=1;i<n;i++){
                if(s.charAt(i)!=s.charAt(i-1)){
                    is100 = false;
                }
            }

            if(is100){
                return 4;
            }
        }



        return f(s, 0,(char)('z'+1), 0, k, dp);
    }

    public int f(String s,int i, char prevChar,int currFreq, int k, Integer[][][][] dp) {
        if(k<0){
            return Integer.MAX_VALUE;
        }

       if(i==s.length()){
           return 0;
       }

       if(currFreq>10){
           currFreq = 10;
       }

       if(dp[i][(int)(prevChar-97)][currFreq][k]!=null){
           return dp[i][(int)(prevChar-97)][currFreq][k];
       }

       char c = s.charAt(i);
       int len = Integer.MAX_VALUE;

       len = Math.min(len, f(s, i+1, prevChar, currFreq, k-1, dp));
       if(c==prevChar){
            if(currFreq==1 || currFreq==9){
                len = Math.min(len, 1 + f(s, i+1, c, currFreq+1, k, dp));
            } else {
                len = Math.min(len, f(s, i+1, c, currFreq+1, k, dp));
            }
       } else {
           len = Math.min(len, 1 + f(s, i+1, c, 1, k, dp));

       }

       return dp[i][(int)(prevChar-97)][currFreq][k] = len;
    }
}
